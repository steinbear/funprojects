#include <cstdlib>
#include <iostream>

#include <opencv/cv.h>
#include <opencv/cxcore.h>
#include <opencv/highgui.h>

#include "brisque_feature.h"

#include <pthread.h>
#include <sys/time.h>

#define TEST_OUT_PATH "/Users/dorian/ShortTerm/"
#define NFEATURES 36
#define TILE_W 10
#define NUM_TILES (TILE_W*TILE_W)

typedef void (*tile_processor_f)(IplImage* image_tile, int x, int y, void* ctx);

static void tile_image(IplImage* img, tile_processor_f tile_processor, void* ctx);
static void tiler_calculate_brisque_for_tile(IplImage* image_tile, int x, int y, void* ctx);
static float calculate_niqe_score(IplImage* src);



/*************************************************************************************
 Testing framework
 */

void tiler_write_image_to_file(IplImage* image_tile, int x, int y, void* ctx)
{
	char filename[255];
	sprintf(filename, "%s/img%d%d.bmp", ctx, x, y);
	cvSaveImage(filename, image_tile);
}

float do_brisque(IplImage* img)
{
	std::vector<double> brisqueFeatures;
	ComputeBrisque((IplImage*)img, brisqueFeatures);
	return 0.0;
}

void time_fn(float (*f)(IplImage*), IplImage* img)
{
	timeval start, end;
	gettimeofday(&start,NULL);
	
	for (int zz = 0; zz < 8; zz++)
		f(img);
	
	gettimeofday(&end, NULL);
	double duration = ((double)end.tv_sec + end.tv_usec/1000000.0) - ((double)start.tv_sec + start.tv_usec/1000000.0);
	//cout << duration << " seconds." << endl;
}

int main(int argc, char** argv)
{
	IplImage* orig = cvLoadImage(argv[1]);
	
	if (orig == NULL)
	{
		fprintf(stderr, "Unable to load %s\n", argv[1]);
		return -1;
	}
	
	IplImage *orig_bw_int = cvCreateImage(cvGetSize(orig), IPL_DEPTH_8U, 1);
    cvCvtColor(orig, orig_bw_int, CV_RGB2GRAY);
	
	
	if (argc > 2 && !strcmp(argv[2], "--features"))
	{
		double featureArray[NUM_TILES][NFEATURES];
		tile_image(orig_bw_int, tiler_calculate_brisque_for_tile, featureArray);
		
		for (int i = 0; i < NUM_TILES; i++)
		{
			for (int j = 0; j < NFEATURES; j++)
				printf("%f ", featureArray[i][j]);
			
			printf("\r\n");
		}
	}
	else
	{
		float rating = calculate_niqe_score(orig_bw_int);
		
		if (rating < 0.0)
			return -2;
		
		fprintf(stdout, "%3.2f\n", rating);
	}
	
	cvReleaseImage(&orig_bw_int);
	cvReleaseImage(&orig);
	
    return 0;
}





/*************************************************************************************
 NIQE Code
 */

static void tile_image(IplImage* img, tile_processor_f tile_processor, void* ctx)
{
	CvSize tile_size = cvSize((int)(img->width / (float)(TILE_W)), (int)(img->height / (float)(TILE_W)));
	
	IplImage* subimage_header = cvCreateImageHeader(tile_size, 8, 1);
	CvMat* matrix = cvCreateMat(tile_size.height, tile_size.width, CV_8UC1);
	
	for (int i = 0; i < TILE_W; i++)
	{
		for (int j = 0; j < TILE_W; j++)
		{
			cvGetSubRect(img, matrix, cvRect(tile_size.width * j, tile_size.height * i, tile_size.width, tile_size.height));
			IplImage* subimage = cvGetImage(matrix, subimage_header);
            tile_processor(subimage, i, j, ctx);
		}
	}
	
	cvReleaseMat(&matrix);
}

static void tiler_calculate_brisque_for_tile(IplImage* image_tile, int x, int y, void* ctx)
{
	double* featureMatrix = (double*)ctx;
	std::vector<double> brisqueFeaturesRow;
	
	ComputeBrisque((IplImage*)image_tile, brisqueFeaturesRow);
	
	for (int i = 0; i < NFEATURES; i++)
		featureMatrix[(y * TILE_W + x) * NFEATURES + i] = brisqueFeaturesRow[i];
}

static float guassian_feature_distance(double mu_prisparam[NFEATURES], double mu_distparam[NFEATURES],
								double cov_prisparam[NFEATURES][NFEATURES],
								double cov_distparam[NFEATURES][NFEATURES])
{
	// %invcov_param = pinv((cov_prisparam+cov_distparam)/2);
	CvMat* avg_cov = cvCreateMat(NFEATURES, NFEATURES, CV_32FC1);
	CvMat* invcov_param = cvCreateMat(NFEATURES, NFEATURES, CV_32FC1);
	
	for (int i = 0; i < NFEATURES; i++)
		for (int j = 0; j < NFEATURES; j++)
			cvmSet(avg_cov, i, j, (cov_prisparam[i][j] + cov_distparam[i][j]) / 2.0);
	
	cvInvert(avg_cov, invcov_param, CV_SVD);
	
	
	// %quality = sqrt((mu_prisparam-mu_distparam)* invcov_param*(mu_prisparam-mu_distparam)');
	
	// mu_prisparam-mu_distparam; (mu_prisparam-mu_distparam)'
	CvMat* normalized_mu = cvCreateMat(1, NFEATURES, CV_32FC1);
	CvMat* normalized_mu_transposed = cvCreateMat(NFEATURES, 1, CV_32FC1);
	
	for (int i = 0; i < NFEATURES; i++)
	{
		float delta = mu_prisparam[i] - mu_distparam[i];
		cvmSet(normalized_mu, 0, i, delta);
		cvmSet(normalized_mu_transposed, i, 0, delta);
	}
	
	// (mu_prisparam-mu_distparam)* invcov_param
	CvMat* t = cvCreateMat(1, 36, CV_32FC1);
	cvmMul(normalized_mu, invcov_param, t);
	
	//*(mu_prisparam-mu_distparam)'
	CvMat* result = cvCreateMat(1, 1, CV_32FC1);
	cvmMul(t, normalized_mu_transposed, result);
	double distance = sqrtf(cvmGet(result, 0, 0));
	
	cvReleaseMat(&avg_cov);
	cvReleaseMat(&invcov_param);
	cvReleaseMat(&normalized_mu_transposed);
	cvReleaseMat(&normalized_mu);
	cvReleaseMat(&result);
	
	return distance;
}

static float niqe_logistic_mapping(float distance)
{
	double beta[] = {-69.144,-0.86325,4.2883,0.75882,34.043};
	return beta[0]*(0.5-(1.0/(1.0+exp(beta[1]*(distance-beta[2])))))+(beta[3]*distance)+beta[4];
}

static float calculate_niqe_score(IplImage* src)
{
	// First, calculate features based on each tile
	double featureArray[NUM_TILES][NFEATURES];
	tile_image(src, tiler_calculate_brisque_for_tile, featureArray);
	
	double realFeatures[NUM_TILES][NFEATURES];
	int validTileCount = 0;
	for (int i = 0; i < NUM_TILES; i++)
	{
		int hasNAN = 0;
		for (int j = 0; j < NFEATURES; j++)
		{
			if (isnan(featureArray[i][j]))
			{
				hasNAN = 1;
				break;
			}
		}
		
		if (!hasNAN)
		{
			memcpy(realFeatures[validTileCount], featureArray[i], NFEATURES*sizeof(double));
			validTileCount++;
		}
	}
	
	
	// Calculate the mean vector
	double mu_distparam[validTileCount];
	
	for (int j = 0; j < NFEATURES; j++)
	{
		float mean = 0.0;
		for (int i=0; i < validTileCount; i++)
			mean += realFeatures[i][j];
		
		mu_distparam[j] = mean / (float)(validTileCount);
	}
	
	// Calculate the covariance
	CvMat** input = new CvMat*[validTileCount];

	for (int i=0; i < validTileCount; i++)
	{
		input[i] = cvCreateMat(1, NFEATURES, CV_32FC1);
		for(int j=0; j<NFEATURES; j++) {
			cvmSet(input[i], 0, j, realFeatures[i][j]);
		}
	}
	
	CvMat* cov_distparam = cvCreateMat(NFEATURES, NFEATURES, CV_32FC1);
	CvMat* meanvec = cvCreateMat(1, validTileCount, CV_32FC1);
	
	cvCalcCovarMatrix((const void **) input, validTileCount, cov_distparam, meanvec, CV_COVAR_NORMAL);
	double covNew[NFEATURES][NFEATURES];
	
	for (int i=0; i <  NFEATURES; i++)
		for(int j=0; j < NFEATURES; j++)
			covNew[i][j] = cvGetReal2D(cov_distparam,i,j) / (float)(validTileCount - 1);
	
	
	double muPristine[36] = {2.5859,0.28827,0.81441,0.049912,0.074478,0.11658,0.80579,0.077926,0.06243,0.13468,0.82438,-0.020467,0.10735,0.082005,0.82433,-0.019464,0.10655,0.082727,2.884,0.36052,0.85331,-0.017221,0.15993,0.13329,0.84192,0.021749,0.14035,0.15795,0.86746,-0.037451,0.16497,0.11889,0.86756,-0.03782,0.16522,0.11857};
	
	double covPristine[36][36] = {
		0.50669,0.049609,0.089086,-0.0015755,0.025789,0.027137,0.08337,0.018296,0.015341,0.040831,0.082186,-0.0086342,0.033719,0.022024,0.081898,-0.010013,0.034319,0.021399,0.47118,0.058645,0.071941,-0.016939,0.051672,0.029493,0.067284,-4.2493e-05,0.040904,0.042354,0.070494,-0.012926,0.049785,0.031282,0.069631,-0.015537,0.052128,0.029159,
		0.049609,0.014996,0.011926,-0.00015884,0.0076315,0.008965,0.011315,0.0027676,0.0060017,0.011118,0.0099365,-0.0032041,0.01071,0.0065699,0.0098981,-0.0029553,0.010526,0.0067577,0.036685,0.015523,0.0079854,-0.0048422,0.013979,0.0074574,0.0077602,-0.0026721,0.01218,0.0093121,0.007357,-0.0029465,0.01283,0.0083367,0.007458,-0.0029865,0.012823,0.0082618,
		0.089086,0.011926,0.020917,-0.00081904,0.0061753,0.0060454,0.017816,0.0050285,0.0034486,0.010081,0.017721,-0.0021162,0.0080718,0.0051266,0.017652,-0.0021037,0.0080254,0.0051962,0.081124,0.013594,0.01616,-0.0048438,0.01206,0.0058167,0.014078,0.0013591,0.0083771,0.010259,0.014525,-0.0028404,0.011242,0.0070251,0.014359,-0.0029769,0.011371,0.0069079,
		-0.0015755,-0.00015884,-0.00081904,0.0034413,-0.0017945,0.0017457,0.00072643,-0.0015425,0.00051097,-0.0015194,-0.00012085,0.001157,-0.00082979,0.00033194,-0.00013976,0.00099048,-0.00072009,0.00023788,0.0040801,0.0013137,3.2524e-05,0.0035611,-0.0013253,0.0030042,0.0014969,-0.0022061,0.0021347,-0.00087558,0.00061187,0.00038398,0.00062766,0.00098947,0.00050738,0.00015553,0.00085382,0.00085045,
		0.025789,0.0076315,0.0061753,-0.0017945,0.0049412,0.0037677,0.0053188,0.0019714,0.0029336,0.0063988,0.0049626,-0.0022285,0.006028,0.0032106,0.0049861,-0.0020275,0.0058676,0.0033444,0.016088,0.0071331,0.003854,-0.0039694,0.0077598,0.0024224,0.0032576,-0.00051156,0.0053099,0.0049896,0.0033654,-0.0015656,0.0061942,0.0038203,0.0034968,-0.0015205,0.0061043,0.0038076,
		0.027137,0.008965,0.0060454,0.0017457,0.0037677,0.0066435,0.006777,0.00030336,0.0042565,0.0057696,0.0054157,-0.0015108,0.0063041,0.0042084,0.0054077,-0.0014716,0.0062628,0.0042527,0.021281,0.0097704,0.0041808,-0.0009631,0.0077191,0.0061827,0.0050959,-0.0034641,0.0089109,0.0046542,0.0042608,-0.0015526,0.0080716,0.0055458,0.004295,-0.001724,0.0081987,0.0053941,
		0.08337,0.011315,0.017816,0.00072643,0.0053188,0.006777,0.018039,0.0033241,0.0037886,0.008506,0.016245,-0.0016798,0.007543,0.0050889,0.016203,-0.0018383,0.0075921,0.0050474,0.077725,0.013082,0.014536,-0.00245,0.010435,0.0070899,0.014473,-0.00098962,0.0093913,0.0083227,0.013788,-0.0023206,0.010644,0.0070969,0.013637,-0.0026807,0.010967,0.0068044,
		0.018296,0.0027676,0.0050285,-0.0015425,0.0019714,0.00030336,0.0033241,0.0037776,-0.00043028,0.0037673,0.0041328,-0.00047708,0.0016545,0.00093743,0.004089,-0.00025053,0.0015078,0.0010798,0.01486,0.0037694,0.004022,-0.002741,0.0039575,0.00042415,0.0023378,0.0033111,0.0003904,0.0045981,0.0033244,-0.0011047,0.0030202,0.0014771,0.0032652,-0.0010231,0.0029725,0.0015518,
		0.015341,0.0060017,0.0034486,0.00051097,0.0029336,0.0042565,0.0037886,-0.00043028,0.0032691,0.0037556,0.0028892,-0.0013916,0.0046076,0.0027948,0.0029047,-0.0013766,0.0045845,0.002817,0.010893,0.00576,0.002121,-0.0012281,0.0051214,0.0033487,0.0026747,-0.0026736,0.0057765,0.0024887,0.0021098,-0.00090077,0.0048882,0.0034035,0.0022087,-0.00095618,0.0048912,0.0033258,
		0.040831,0.011118,0.010081,-0.0015194,0.0063988,0.0057696,0.008506,0.0037673,0.0037556,0.0095108,0.0082962,-0.0026571,0.008146,0.0047039,0.0082727,-0.0023256,0.0079122,0.0049268,0.028951,0.0116,0.0068494,-0.0051536,0.011458,0.0045332,0.0056746,6.7292e-05,0.0079396,0.0084635,0.0060796,-0.0025545,0.0098476,0.0059961,0.0061402,-0.0025082,0.0097862,0.0060019,
		0.082186,0.0099365,0.017721,-0.00012085,0.0049626,0.0054157,0.016245,0.0041328,0.0028892,0.0082962,0.017465,-0.0019238,0.0065891,0.0039975,0.016585,-0.0016241,0.0064974,0.0042706,0.07572,0.011717,0.014376,-0.0032275,0.0097747,0.005651,0.013201,0.0007941,0.0073866,0.0085777,0.014208,-0.0029901,0.0097919,0.0056016,0.013613,-0.0027585,0.0098038,0.0057542,
		-0.0086342,-0.0032041,-0.0021162,0.001157,-0.0022285,-0.0015108,-0.0016798,-0.00047708,-0.0013916,-0.0026571,-0.0019238,0.0025516,-0.0033583,-0.00057558,-0.001562,0.00043379,-0.0021836,-0.001749,-0.0030413,-0.0022703,-0.00081647,0.0021976,-0.0031313,-0.00041246,-0.00073374,0.00061381,-0.0019789,-0.0015338,-0.0011645,0.0017165,-0.0027439,-0.00051613,-0.00062484,0.00010978,-0.0017675,-0.001632,
		0.033719,0.01071,0.0080718,-0.00082979,0.006028,0.0063041,0.007543,0.0016545,0.0046076,0.008146,0.0065891,-0.0033583,0.0086147,0.0043781,0.0064848,-0.0020261,0.0077691,0.0051611,0.022905,0.010426,0.0051742,-0.0040855,0.010286,0.0046888,0.0051218,-0.0021918,0.0086679,0.006232,0.0048255,-0.002404,0.0091923,0.0055196,0.0046914,-0.0016908,0.0086975,0.0060018,
		0.022024,0.0065699,0.0051266,0.00033194,0.0032106,0.0042084,0.0050889,0.00093743,0.0027948,0.0047039,0.0039975,-0.00057558,0.0043781,0.0034208,0.004251,-0.0015796,0.0049124,0.0028526,0.016758,0.0070629,0.0035844,-0.0017291,0.0061857,0.0037167,0.0036006,-0.0015747,0.0058824,0.0040037,0.0029829,-0.00063458,0.0055696,0.0043662,0.0033726,-0.0015134,0.0060817,0.00369,
		0.081898,0.0098981,0.017652,-0.00013976,0.0049861,0.0054077,0.016203,0.004089,0.0029047,0.0082727,0.016585,-0.001562,0.0064848,0.004251,0.017505,-0.0020424,0.0065951,0.0039176,0.075541,0.011667,0.014297,-0.0031394,0.0096539,0.0056778,0.013091,0.00080439,0.0073447,0.0085495,0.013774,-0.0024671,0.009478,0.0059274,0.01397,-0.0033274,0.010042,0.0052806,
		-0.010013,-0.0029553,-0.0021037,0.00099048,-0.0020275,-0.0014716,-0.0018383,-0.00025053,-0.0013766,-0.0023256,-0.0016241,0.00043379,-0.0020261,-0.0015796,-0.0020424,0.0024587,-0.0031306,-0.00044772,-0.0050967,-0.0019937,-0.00094768,0.0017252,-0.0025364,-0.00054075,-0.00068742,0.00078379,-0.0019576,-0.001222,-0.00070275,0.00014493,-0.0016044,-0.0013969,-0.0014262,0.0016731,-0.0024551,-0.00027027,
		0.034319,0.010526,0.0080254,-0.00072009,0.0058676,0.0062628,0.0075921,0.0015078,0.0045845,0.0079122,0.0064974,-0.0021836,0.0077691,0.0049124,0.0065951,-0.0031306,0.0083116,0.0044153,0.023683,0.010215,0.0051507,-0.003823,0.0099073,0.004722,0.0050265,-0.0022686,0.0085955,0.0060349,0.0045757,-0.0016807,0.008576,0.0058852,0.0050053,-0.0023967,0.0089522,0.0052938,
		0.021399,0.0067577,0.0051962,0.00023788,0.0033444,0.0042527,0.0050474,0.0010798,0.002817,0.0049268,0.0042706,-0.001749,0.0051611,0.0028526,0.0039176,-0.00044772,0.0044153,0.003665,0.015973,0.0072777,0.0035998,-0.0020334,0.0066023,0.0036539,0.0037158,-0.0015055,0.0059616,0.0041967,0.0033007,-0.001492,0.0062607,0.0039028,0.0029587,-0.00063689,0.0057439,0.00454,
		0.47118,0.036685,0.081124,0.0040801,0.016088,0.021281,0.077725,0.01486,0.010893,0.028951,0.07572,-0.0030413,0.022905,0.016758,0.075541,-0.0050967,0.023683,0.015973,1.3433,0.056094,0.15152,-0.0039684,0.041916,0.034057,0.14419,0.0048319,0.037067,0.040538,0.15772,-0.010414,0.045242,0.029755,0.15433,-0.013834,0.048671,0.027778,
		0.058645,0.015523,0.013594,0.0013137,0.0071331,0.0097704,0.013082,0.0037694,0.00576,0.0116,0.011717,-0.0022703,0.010426,0.0070629,0.011667,-0.0019937,0.010215,0.0072777,0.056094,0.018637,0.011125,-0.0037648,0.015327,0.0098516,0.010921,-0.002023,0.013806,0.011466,0.010577,-0.0031444,0.014919,0.0099689,0.010555,-0.0033181,0.015057,0.0098303,
		0.071941,0.0079854,0.01616,3.2524e-05,0.003854,0.0041808,0.014536,0.004022,0.002121,0.0068494,0.014376,-0.00081647,0.0051742,0.0035844,0.014297,-0.00094768,0.0051507,0.0035998,0.15152,0.011125,0.027926,-0.0025662,0.0084082,0.0047902,0.021909,0.0025394,0.0062612,0.0087352,0.023577,-0.0014276,0.0086168,0.0061008,0.02312,-0.0019573,0.0090632,0.0057818,
		-0.016939,-0.0048422,-0.0048438,0.0035611,-0.0039694,-0.0009631,-0.00245,-0.002741,-0.0012281,-0.0051536,-0.0032275,0.0021976,-0.0040855,-0.0017291,-0.0031394,0.0017252,-0.003823,-0.0020334,-0.0039684,-0.0037648,-0.0025662,0.0075904,-0.0073332,0.0019103,0.00010547,-0.0019145,-0.0015963,-0.0045025,-0.00097251,0.0017351,-0.0039094,-0.0016883,-0.0010677,0.0012439,-0.0034705,-0.0020079,
		0.051672,0.013979,0.01206,-0.0013253,0.0077598,0.0077191,0.010435,0.0039575,0.0051214,0.011458,0.0097747,-0.0031313,0.010286,0.0061857,0.0096539,-0.0025364,0.0099073,0.0066023,0.041916,0.015327,0.0084082,-0.0073332,0.016027,0.0060418,0.0075923,-0.0009119,0.011285,0.010619,0.0077342,-0.0032515,0.013213,0.0082588,0.0077491,-0.0029933,0.012985,0.0084212,
		0.029493,0.0074574,0.0058167,0.0030042,0.0024224,0.0061827,0.0070899,0.00042415,0.0033487,0.0045332,0.005651,-0.00041246,0.0046888,0.0037167,0.0056778,-0.00054075,0.004722,0.0036539,0.034057,0.0098516,0.0047902,0.0019103,0.0060418,0.0080417,0.0070013,-0.003355,0.008776,0.0044656,0.0060801,-0.0013058,0.0077678,0.0055419,0.0059483,-0.0017537,0.0081846,0.0052369,
		0.067284,0.0077602,0.014078,0.0014969,0.0032576,0.0050959,0.014473,0.0023378,0.0026747,0.0056746,0.013201,-0.00073374,0.0051218,0.0036006,0.013091,-0.00068742,0.0050265,0.0037158,0.14419,0.010921,0.021909,0.00010547,0.0075923,0.0070013,0.025968,-0.00039155,0.0071699,0.0061371,0.022399,-0.0012585,0.0085073,0.0061667,0.021803,-0.0014824,0.0087927,0.0060649,
		-4.2493e-05,-0.0026721,0.0013591,-0.0022061,-0.00051156,-0.0034641,-0.00098962,0.0033111,-0.0026736,6.7292e-05,0.0007941,0.00061381,-0.0021918,-0.0015747,0.00080439,0.00078379,-0.0022686,-0.0015055,0.0048319,-0.002023,0.0025394,-0.0019145,-0.0009119,-0.003355,-0.00039155,0.0074435,-0.0061024,0.002811,0.0015342,-4.8036e-05,-0.0019212,-0.001929,0.0016365,0.00028211,-0.0022422,-0.001701,
		0.040904,0.01218,0.0083771,0.0021347,0.0053099,0.0089109,0.0093913,0.0003904,0.0057765,0.0079396,0.0073866,-0.0019789,0.0086679,0.0058824,0.0073447,-0.0019576,0.0085955,0.0059616,0.037067,0.013806,0.0062612,-0.0015963,0.011285,0.008776,0.0071699,-0.0061024,0.013814,0.0062205,0.0064306,-0.0020904,0.011515,0.008113,0.0063141,-0.0025549,0.011933,0.0077946,
		0.042354,0.0093121,0.010259,-0.00087558,0.0049896,0.0046542,0.0083227,0.0045981,0.0024887,0.0084635,0.0085777,-0.0015338,0.006232,0.0040037,0.0085495,-0.001222,0.0060349,0.0041967,0.040538,0.011466,0.0087352,-0.0045025,0.010619,0.0044656,0.0061371,0.002811,0.0062205,0.010032,0.0077952,-0.002565,0.009486,0.0056237,0.0078182,-0.0024683,0.0093908,0.0056799,
		0.070494,0.007357,0.014525,0.00061187,0.0033654,0.0042608,0.013788,0.0033244,0.0021098,0.0060796,0.014208,-0.0011645,0.0048255,0.0029829,0.013774,-0.00070275,0.0045757,0.0033007,0.15772,0.010577,0.023577,-0.00097251,0.0077342,0.0060801,0.022399,0.0015342,0.0064306,0.0077952,0.028062,-0.0025529,0.0080759,0.0044875,0.023817,-0.0021045,0.0086073,0.0052581,
		-0.012926,-0.0029465,-0.0028404,0.00038398,-0.0015656,-0.0015526,-0.0023206,-0.0011047,-0.00090077,-0.0025545,-0.0029901,0.0017165,-0.002404,-0.00063458,-0.0024671,0.00014493,-0.0016807,-0.001492,-0.010414,-0.0031444,-0.0014276,0.0017351,-0.0032515,-0.0013058,-0.0012585,-4.8036e-05,-0.0020904,-0.002565,-0.0025529,0.0032989,-0.0040982,-3.0325e-05,-0.0015334,0.00058268,-0.0025017,-0.0018095,
		0.049785,0.01283,0.011242,0.00062766,0.0061942,0.0080716,0.010644,0.0030202,0.0048882,0.0098476,0.0097919,-0.0027439,0.0091923,0.0055696,0.009478,-0.0016044,0.008576,0.0062607,0.045242,0.014919,0.0086168,-0.0039094,0.013213,0.0077678,0.0085073,-0.0019212,0.011515,0.009486,0.0080759,-0.0040982,0.013524,0.0074601,0.0080497,-0.002594,0.012408,0.0083247,
		0.031282,0.0083367,0.0070251,0.00098947,0.0038203,0.0055458,0.0070969,0.0014771,0.0034035,0.0059961,0.0056016,-0.00051613,0.0055196,0.0043662,0.0059274,-0.0013969,0.0058852,0.0039028,0.029755,0.0099689,0.0061008,-0.0016883,0.0082588,0.0055419,0.0061667,-0.001929,0.008113,0.0056237,0.0044875,-3.0325e-05,0.0074601,0.0067861,0.0055631,-0.0018958,0.0084766,0.0053554,
		0.069631,0.007458,0.014359,0.00050738,0.0034968,0.004295,0.013637,0.0032652,0.0022087,0.0061402,0.013613,-0.00062484,0.0046914,0.0033726,0.01397,-0.0014262,0.0050053,0.0029587,0.15433,0.010555,0.02312,-0.0010677,0.0077491,0.0059483,0.021803,0.0016365,0.0063141,0.0078182,0.023817,-0.0015334,0.0080497,0.0055631,0.026997,-0.0029085,0.0083951,0.0042323,
		-0.015537,-0.0029865,-0.0029769,0.00015553,-0.0015205,-0.001724,-0.0026807,-0.0010231,-0.00095618,-0.0025082,-0.0027585,0.00010978,-0.0016908,-0.0015134,-0.0033274,0.0016731,-0.0023967,-0.00063689,-0.013834,-0.0033181,-0.0019573,0.0012439,-0.0029933,-0.0017537,-0.0014824,0.00028211,-0.0025549,-0.0024683,-0.0021045,0.00058268,-0.002594,-0.0018958,-0.0029085,0.0034665,-0.0043903,-2.1986e-05,
		0.052128,0.012823,0.011371,0.00085382,0.0061043,0.0081987,0.010967,0.0029725,0.0048912,0.0097862,0.0098038,-0.0017675,0.0086975,0.0060817,0.010042,-0.0024551,0.0089522,0.0057439,0.048671,0.015057,0.0090632,-0.0034705,0.012985,0.0081846,0.0087927,-0.0022422,0.011933,0.0093908,0.0086073,-0.0025017,0.012408,0.0084766,0.0083951,-0.0043903,0.013898,0.0073509,
		0.029159,0.0082618,0.0069079,0.00085045,0.0038076,0.0053941,0.0068044,0.0015518,0.0033258,0.0060019,0.0057542,-0.001632,0.0060018,0.00369,0.0052806,-0.00027027,0.0052938,0.00454,0.027778,0.0098303,0.0057818,-0.0020079,0.0084212,0.0052369,0.0060649,-0.001701,0.0077946,0.0056799,0.0052581,-0.0018095,0.0083247,0.0053554,0.0042323,-2.1986e-05,0.0073509,0.0067082};
		
	float distance = guassian_feature_distance(muPristine, mu_distparam, covPristine, covNew);
	float mapped_score = niqe_logistic_mapping(distance);
	
	return distance;
}

